h1. "Acts_As_Mailchimp":http://github.com/bgetting/acts_as_mailchimp/tree/master

This is an overhaul to the old acts_as_mailchimp plugin that requires the "Hominid gem":http://github.com/bgetting/hominid/tree/master.

h2. Installation

Install as a plugin by typing: @script/plugin install git://github.com/bgetting/acts_as_mailchimp.git@

h3. Prerequisites

You will need a few things to be in place before using this plugin.

h4. Mailchimp Account

You will need to have an account set up at "MailChimp":http://www.mailchimp.com. Setting up an "account at MailChimp":http://www.mailchimp.com/tryit.phtml is free and you will not be charged until you actually send out emails.

h4. Hominid Gem

You will also need to have Hominid installed as a plugin:

    script/plugin install git://github.com/bgetting/hominid.git

or as a GemPlugin (recommended) by including the following in your **environment.rb** file:

    config.gem "bgetting-hominid", :version => '~> 0.0.2', :lib => 'hominid', :source => "http://gems.github.com"

h4. Required Fields

"Acts_As_Mailchimp":http://github.com/bgetting/acts_as_mailchimp/tree/master expects a model with the following required fields:
* @email:string@ - The email address to add/remove from a MailChimp mailing list.
* @email_type:string@ - Preferred email format. Must be either 'html' or 'text'.

Additionally, the plugin allows for the following options fields, which must be added to your list first in MailChimp:
* @first_name:string@ - The first name of the user to add/remove from a MailChimp mailing list.
* @last_name:string@ - The last name of the user to add/remove from a MailChimp mailing list.

h3. After Installation

There are a couple of things that you will need to do after installing the plugin:

* If you are using the GemPlugin, make sure to create a configuration file at @config/hominid.yml@.
* Add your MailChimp username and password for each environment that you want to use into @/config/hominid.yml@.
* Generate a migration to add the @first_name@ and @last_name@ fields to the 'User' model (*Optional*).
* Make any adjustments that you want to @/db/migrate/add_mailchimp_fields.rb@ (*Optional*).
* Migrate your database with @rake db:migrate@.

h2. Usage

The following assumes that you have a model named 'User', which has the required @email@ and @email_type@ fields. Please alter to suit if you have a different schema.

* Add @acts_as_mailchimp@ anywhere in your @/models/user.rb@ file.

h3. Customizing

You can customize the fields that the plugin accepts to make an existing model more Chimp-like. Simply pass the fields that you would like to use along with the @acts_as_mailchimp@ call in your 'User' model.

    acts_as_mailchimp :email => 'email_field',
                       :type => 'email_type_field',
                       :fname => 'first_name_field',
                       :lname => 'last_name_field'

You only need to pass in the column names that you want to override.

h3. Methods

Once added to a model, "acts_as_mailchimp":http://github.com/bgetting/acts_as_mailchimp/tree/master adds the following methods to model instances:

    user.add_to_mailchimp("list_name")

Add a user to a mailing list at MailChimp called *list_name*. You can set the @double_opt@ boolean to "true" in the @config/hominid.yml@ file to use the double opt-in feature at Mailchimp. If set to true, a confirmation email will be generated from MailChimp (and customizable in the MailChimp interface) that will ask the user to verify their desire to be added to the mailing list. They will need to click a verification link in order to be added to the list.

    user.remove_from_mailchimp("list_name")

Removes a user from the specified mailing list at MailChimp.

    user.update_mailchimp("list_name", "previous_email_address")

Updates a user's information at MailChimp. The value for @previous_email_address@ is optional, and will default to the email address in the database for that user. The idea here is that if a user changes their email address in the Rails application, MailChimp will need to old email address in order to look up the user.

h2. Examples

The following controller examples illustrate how to use "acts_as_mailchimp":http://github.com/bgetting/acts_as_mailchimp/tree/master:

To add a user to a mailing list called _weekly_newsletter_:

    user.add_to_mailchimp("weekly_newsletter")

To remove a user from a mailing list called _weekly_newsletter_:

    user.remove_from_mailchimp("weekly_newsletter")

To update information about a user *Rails 2.1 or below*:

    previous = params[:user][:email]
    if user.update_attributes(params[:user])
    	user.update_mailchimp("weekly_newsletter", previous) if user.email != previous
    end

To update information about a user *Rails 2.1 or above*:

    if user.update_attributes(params[:user])
      user.update_mailchimp("weekly_newsletter", user.email_was) if user.email_changed?
    end

Keep in mind that you these update examples do not make calls to the MailChimp API unless the user changes their email address. If you are integrating @first_name@ and @last_name@ fields as well, you will need to adjust your controller code to update MailChimp when they change either of these values as well.

h2. Syncing Your Rails Application

You can sync your mailing list at Mailchimp with your application database using List Web Hooks. To set up a web hook for a list in Mailchimp, follow these instructions:

# Log in to your Mailchimp account.
# Click on the "Lists" tab.
# Click "view list" for the list you want to work with.
# Click on "list tools" at the top.
# Click on "web hooks" on the tools page.

Basically, a web hook is a POST request that will be automatically sent from Mailchimp to a URL of your choice when certain events occur. You can take a look at the documentation to adjust your particular web hook, but the defaults are fine for demonstration.

To start, enter the URL in your application that you want Mailchimp to send requests to:

    http://myapp.com/mailchimp?secret=123456

As you can see, we also include a secret value since we want to be able to determine between a request from Mailchimp and a request from somewhere else. Remember, this URL will be exposed (even though you will keep it a secret) to the world, so requests need to be verified. In this case, we would just have something like this in the controller:

    unless params[:secret] == '123456'
	    ...
    end

You can see the types of responses that each action will send by visiting the "Mailchimp documentation for web hooks":http://www.mailchimp.com/api/webhooks/. Currently the web hooks can be fired when the following events occur:

* Subscribes
* Unsubscribes
* Profile updates
* Email address change
* Cleaned emails

You will want to account for each of these in the controller that you create to receive these POST requests. Sometimes you may not have to worry about all of them, such as if your application handles all subscribes to the list, then you probably don't have to process subscribes from the web hook. Especially if your user model requires more data than is supplied by the web hook. The documentation also contains sample output for each of these events. A sample controller action might look like this:

<pre><code>def index
  if params[:secret] == "123456"
    case params[:type]      
    when "unsubscribe"
      user = User.find_by_email(params[:data][:email])
			user.unsubscribe!
    when "profile"
      user = User.find_by_email(params[:data][:email])
			user.first_name = params[:data][:merges][:FNAME]
			user.last_name = params[:data][:merges][:LNAME]
			user.email_type = params[:data][:email_type]
			user.save
    when "upemail"
      user = User.find_by_email(params[:data][:old_email])
			user.email = params[:data][:new_email]
    end
  end
end</code></pre>

h2. Updates

**April 2009**

Updated the README to use web hooks rather than the older method of syncing an application with the Mailchimp database. This will probably be updated again when the Hominid gem is updated.

**March 2009**

This plugin has been overhauled to work with the new "Hominid":http://github.com/bgetting/hominid GemPlugin, which is expected to be completed by the end of April 2009. In the meantime, there may be some inconsistencies and bugs in the plugins. I'll try and make an announcement when the Hominid GemPlugin is completed, and when the Acts_As_Mailchimp plugin has been completely updated as well.

**September 2008**

MailChimp updated their API from @Version 1.0@ to @Version 1.1@ in August 2008. We are continuing to update "acts_as_mailchimp":http://github.com/bgetting/acts_as_mailchimp/tree/master in order to keep it current, and have issued the following changes as of September 2008:

* API calls are now being made to @Version 1.1@ of the MailChimp API.
* @add_to_chimp@ changed to @add_to_mailchimp@.
* @remove_from_chimp@ changed to @remove_from_mailchimp@.
* @update_chimp_@ changed to @update_mailchimp@.